{"version":3,"sources":["logo.svg","firebase.js","components/story.js","components/welcome.js","components/home.js","components/menu.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","firebase","require","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","databaseRef","database","ref","firebaseRef","pushToFirebase","req","res","console","log","query","child","push","set","item","send","createGame","name","Promise","resolve","reject","players","turn","users","0","turnBased","error","key","createUser","gameId","user","game","once","then","dataSnapshot","val","dataJson","currentPlayers","parseInt","catch","err","message","addWord","word","words","value","transaction","currentRank","getGame","gamePath","changeTurnMode","currentMode","Story","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","buildStory","story","storyString","_i","_Object$values","values","length","addToStory","state","currentInput","setState","handleInput","e","data","openModal","modal","closeModal","calculateTurn","copyToClipboard","stringToCopy","textArea","document","createElement","style","position","left","body","appendChild","focus","select","execCommand","removeChild","inverted","currentTurn","creating","_this2","on","snapshot","json","setStory","_this3","react_default","a","Segment","Button","circular","icon","floated","onClick","marginTop","color","Form","Field","fluid","Input","placeholder","className","onChange","animated","disabled","Content","visible","hidden","Icon","Divider","raised","Grid","columns","relaxed","Column","map","index","fontSize","queryCommandSupported","basic","visibility","textarea","vertical","Modal","open","onClose","dimmer","Header","Popup","trigger","marginRight","bottom","content","Radio","toggle","checked","Component","Welcome","handleGameId","handleName","submit","type","setGameValues","alert","stackable","textAlign","Row","verticalAlign","Home","toggleTheme","prevState","gameIdUncleaned","getGameData","setGameId","createNewGame","Container","minHeight","welcome_Welcome","story_Story","label","MenuBar","refreshPage","window","location","reload","Menu","size","Item","Description","App","menu_MenuBar","home_Home","Boolean","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.004b9d46.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","const firebase = require('firebase');\n\nconst FirebaseConfig = {\n    apiKey: \"AIzaSyBVvoERxcerBb6M4lh2C3D-rZeYIKZUvjw\",\n    authDomain: \"react-game-78498.firebaseapp.com\",\n    databaseURL: \"https://react-game-78498.firebaseio.com\",\n    projectId: \"react-game-78498\",\n    storageBucket: \"react-game-78498.appspot.com\",\n    messagingSenderId: \"976787720562\",\n    appId: \"1:976787720562:web:2371c16988082bed\"\n}\n\nfirebase.initializeApp(FirebaseConfig);\nconst databaseRef = firebase.database().ref();\n\n// exports.getFirebase = new Promise((resolve, reject) => {\n//     databaseRef.child(\"games\").once(\"value\").then(function (dataSnapshot) {\n//         console.log(dataSnapshot.val());\n//         return resolve(dataSnapshot.val());\n//     }).catch((err) => {\n//         console.error('Firebase error:', err.message);\n//         reject('error occured');\n//     });\n// });\n\nexports.firebaseRef = databaseRef;\n\nexports.pushToFirebase = function (req, res) {\n    console.log(req.query);\n    databaseRef.child(\"todos\").push().set(req.query.item);\n    res.send(\"success\");\n}\n\n// create a new game with the specified name and return the id of the game\n// params: name\nexports.createGame = function (name) {\n    return new Promise(function (resolve, reject) {\n        let game = databaseRef.child(\"games\").push({ players: 1, turn: 0, users: { 0: { name: name } }, turnBased: false }, (error) => {\n            if (error) reject(\"error: \" + error);\n        });\n        return resolve(game.key);\n    })\n};\n\n// params: gameId, user\nexports.createUser = function (gameId, user) {\n    //get number of players currently in game\n    let game = \"games/\" + gameId;\n    databaseRef.child(game + \"/players\").once(\"value\").then(function (dataSnapshot) {\n        console.log(dataSnapshot.val());\n        let dataJson = dataSnapshot.val();\n        let currentPlayers = parseInt(dataJson) + 1;\n        // create user with unique id and increment number of players\n        databaseRef.child(game + \"/players\").set(currentPlayers, (error) => {\n            if (error) return \"error: \" + error;\n        });\n        databaseRef.child(game + \"/users/\" + (currentPlayers - 1)).set({ name: user }, (error) => {\n            if (error) return \"error: \" + error;\n        });\n        return \"\" + (currentPlayers - 1);\n    }).catch((err) => {\n        console.error('Firebase error:', err.message);\n    });;\n}\n\n// params: gameId, word\nexports.addWord = function (gameId, user, word) {\n    // add word\n    let words = \"games/\" + gameId + \"/story\";\n    databaseRef.child(words).push({ value: word, user: user });\n    // increment turn\n    let turn = \"games/\" + gameId + \"/turn\";\n    databaseRef.child(turn).transaction(currentRank => currentRank + 1);\n    return \"success\";\n}\n\nexports.getGame = function (gameId) {\n    return new Promise(function (resolve, reject) {\n        let gamePath = \"games/\" + gameId;\n        const databaseRef = firebase.database().ref(gamePath);\n        databaseRef.once(\"value\").then(function (dataSnapshot) {\n            resolve(dataSnapshot.val());\n        }).catch((err) => {\n            console.error('Firebase error:', err.message);\n            reject(err);\n        });\n    });\n}\n\nexports.changeTurnMode = function(gameId, currentMode) {\n    // change the turn mode to the opposite of the current turn mode\n    let turnBased = \"games/\" + gameId + \"/turnBased\";\n    console.log(!currentMode);\n    databaseRef.child(turnBased).set(!currentMode);\n    return \"success\";\n}","import React, { Component } from 'react';\nimport { createUser, addWord, firebaseRef, createGame, changeTurnMode, getGame } from '../firebase';\nimport { Button, Container, Divider, Form, Grid, Icon, Input, Label, Message, Modal, Header, Segment, Radio, Popup } from 'semantic-ui-react';\n\nexport default class Story extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            inverted: this.props.inverted,\n            game: {},\n            story: \"\",\n            currentInput: \"\",\n            modal: false,\n            currentTurn: \"\"\n        };\n\n        this.creating = false; // game creation in progress\n    }\n\n    componentDidMount() {\n        // listen to database updates and update state accordingly\n        firebaseRef.child(\"games\").on('value', (snapshot) => {\n            let json = snapshot.val();\n            console.log(json);\n            console.log(this.props.gameId);\n            console.log(json[this.props.gameId]);\n            //TODO: convert to promise chain\n            let game = json[this.props.gameId];\n            let story = this.buildStory(game.story);\n            let currentTurn = this.calculateTurn(game);\n            this.setState({ game, story, currentTurn }, this.setStory);\n        });\n    }\n\n    // returns string containing story\n    buildStory = (story) => {\n        // append array of words into a single \"story\" string\n        if (story) {\n            let storyString = \"\";\n            for (let word of Object.values(story)) {\n                storyString += word.value + \" \";\n            }\n            return storyString;\n        }\n    }\n\n    addToStory = () => {\n        console.log(this.props.gameId);\n        addWord(this.props.gameId, this.props.name, this.state.currentInput); //\"-Ll2kMaVAN7LeHFGpO8f\"\n        this.setState({ currentInput: '' });\n    }\n\n    handleInput = (e, data) => this.setState({ currentInput: data.value });\n    openModal = () => this.setState({ modal: true });\n    closeModal = () => this.setState({ modal: false });\n    calculateTurn = (game) => {\n        console.log(\"player's turn: \" + game.turn % game.players);\n        let currentTurn = game.users[game.turn % game.players].name;\n        return currentTurn;\n    }\n    copyToClipboard = (stringToCopy) => {\n        // create temporary text area from which to copy text\n        let textArea = document.createElement(\"textarea\");\n        textArea.value = stringToCopy;\n        textArea.style = {position: 'absolute', left: '-9999px'};\n        document.body.appendChild(textArea);\n        textArea.focus();\n        textArea.select();\n        document.execCommand('copy');\n        // remove temporary text area\n        document.body.removeChild(textArea);\n        this.setState({ message: \"Copied to clipboard!\" });\n    };\n    // startGame = () => this.setState({ started: true });\n\n    render() {\n        console.log(this.state);\n        let turnBased = this.state.game.turnBased;\n        console.log(turnBased);\n        return (\n            <Segment inverted={this.props.inverted}>\n                <Button circular icon='setting' floated=\"right\" onClick={this.openModal} />\n                <p style={{ marginTop: \"1em\" }}>\n                    {this.state.story || <span style={{ color: \"gray\" }}>Enter a word to start the story off!</span>}\n                </p>\n                <Form>\n                    <Form.Field fluid>\n                        <Input placeholder='Enter a word...' className=\"margin\" onChange={this.handleInput} value={this.state.currentInput} />\n                    </Form.Field>\n                    <Button animated inverted color='blue' onClick={this.addToStory} disabled={turnBased && this.state.currentTurn !== this.props.name}>\n                        <Button.Content visible>Add</Button.Content>\n                        <Button.Content hidden>\n                            <Icon name='arrow right' />\n                        </Button.Content>\n                    </Button>\n                </Form>\n                <Divider hidden />\n                <Segment raised>\n                    <Grid columns={2} relaxed='very'>\n                        <Grid.Column>\n                            <p>Players: </p>\n                            <ul>\n                                {this.state.game && this.state.game.users ?\n                                    this.state.game.users.map((value, index) => {\n                                        return <li key={index}>{value.name === this.props.name ? value.name + \" (You)\" : value.name}</li>\n                                    })\n                                    :\n                                    <li>None</li>\n                                }\n                            </ul>\n                            {turnBased ?\n                                <p style={{ color: \"gray\" }}>It is {this.state.currentTurn}'s turn</p>\n                                :\n                                <span />\n                            }\n                        </Grid.Column>\n                        <Grid.Column>\n                            <p>Game id:</p>\n                            <ul>\n                                <li>{this.props.gameId}</li>\n                            </ul>\n                            {this.state.message && <p style={{ color: \"gray\", fontSize: \"18px\" }}>{this.state.message}</p>}\n                            {document.queryCommandSupported('copy') &&\n                                <Button basic color='blue' onClick={() => this.copyToClipboard(this.props.gameId)}>\n                                    <Button.Content>Copy to Clipboard</Button.Content>\n                                </Button>\n                            }\n                            <form style={{ visibility: \"hidden\" }}>\n                                <textarea\n                                    ref={(textarea) => this.textArea = textarea}\n                                    value={this.props.gameId}\n                                />\n                            </form>\n                        </Grid.Column>\n                    </Grid>\n\n                    <Divider vertical hidden />\n                </Segment>\n                <Modal open={this.state.modal} onClose={this.closeModal} dimmer=\"inverted\">\n                    <Modal.Header>Settings</Modal.Header>\n                    <Modal.Content>\n                        <Popup\n                            trigger={<span style={{ marginRight: \"2em\", position: \"relative\", bottom: \".25em\" }}>Enforce turn-taking</span>}\n                            content=\"When on, players must take turns typing in words.\"\n                            basic\n                        />\n                        <Radio toggle checked={turnBased} onChange={() => changeTurnMode(this.props.gameId, turnBased)} />\n                        <Divider hidden />\n                        <Button onClick={this.closeModal}>Ok</Button>\n                    </Modal.Content>\n                </Modal>\n            </Segment>\n        );\n    }\n}\n","import React, { Component } from 'react';\n// import ReactCSSTransitionGroup from 'react-addons-css-transition-group';\nimport { getFirebase, addWord, firebaseRef } from '../firebase';\nimport { Button, Container, Divider, Form, Grid, Header, Icon, Input, Search, Segment, Radio } from 'semantic-ui-react';\nimport '../animations.css';\n\nexport default class Welcome extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            inverted: this.props.inverted,\n            gameId: \"\",\n            name: \"\"\n        };\n    }\n\n    handleGameId = (e, data) => this.setState({ gameId: data.value });\n    handleName = (e, data) => this.setState({ name: data.value });\n    submit = (type) => {\n        if (type == \"create\") {\n            if (this.state.name != \"\") this.props.setGameValues(this.state.gameId, this.state.name);\n            else alert(\"please enter your name\");\n        } else if (type == \"join\") {\n            if (this.state.name != \"\" && this.state.gameId != \"\") this.props.setGameValues(this.state.gameId, this.state.name);\n            else alert(\"Please enter a game id and your name\");\n        }\n    }\n\n    render() {\n        return (\n            <Segment inverted={this.props.inverted}>\n                <Grid columns={2} stackable textAlign='center'>\n                    <Divider vertical inverted={this.props.inverted}>Or</Divider>\n\n                    <Grid.Row verticalAlign='middle'>\n                        <Grid.Column>\n                            <Header icon inverted={this.props.inverted}>\n                                <Icon name='search' />\n                                Join an Existing Game\n                            </Header>\n                            <Form>\n                                <Form.Field fluid>\n                                    <Input placeholder='Enter game id' className=\"margin\" onChange={this.handleGameId} value={this.state.gameId} />\n                                </Form.Field>\n                                <Form.Field fluid>\n                                    <Input placeholder='Enter name' className=\"margin\" onChange={this.handleName} />\n                                </Form.Field>\n                                <Button animated inverted color='blue' onClick={() => this.submit(\"join\")}>\n                                    <Button.Content visible>Join</Button.Content>\n                                    <Button.Content hidden>\n                                        <Icon name='arrow right' />\n                                    </Button.Content>\n                                </Button>\n                            </Form>\n                        </Grid.Column>\n\n                        <Grid.Column>\n                            <Header icon inverted={this.props.inverted}>\n                                <Icon name='world' />\n                                Create A New Game\n                            </Header>\n                            <Form>\n                                <Form.Field fluid>\n                                    <Input placeholder='Enter name' className=\"margin\" onChange={this.handleName} />\n                                </Form.Field>\n                                <Button animated inverted color='blue' onClick={() => this.submit(\"create\")}>\n                                    <Button.Content visible>Create</Button.Content>\n                                    <Button.Content hidden>\n                                        <Icon name='arrow right' />\n                                    </Button.Content>\n                                </Button>\n                            </Form>\n                        </Grid.Column>\n                    </Grid.Row>\n                </Grid>\n            </Segment>\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport Story from './story';\nimport Welcome from './welcome';\nimport { createGame, createUser, getFirebase, getGame, addWord, firebaseRef } from '../firebase';\nimport { Container, Grid, Radio } from 'semantic-ui-react';\n\nexport default class Home extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            inverted: false,\n            game: null,\n            story: \"\",\n            gameId: null,\n            name: \"\",\n        };\n    }\n\n    // componentDidMount() {\n    //     // getFirebase()  -- from ../api, \"proxy\": \"http://localhost:8000\"\n    //     //     .then((res) => {\n    //     //         return res.json();\n    //     //     })\n    //     //     .then((json) => {\n    //     //         this.setState({ game: json[\"-Ll2kMaVAN7LeHFGpO8f\"]}, this.setStory);\n    //     //     });\n\n    //     // getFirebase\n    //     //     .then((json) => {\n    //     //         this.setState({ game: json[\"-Ll2kMaVAN7LeHFGpO8f\"] }, this.setStory);\n    //     //     });\n\n    //     firebaseRef.child(\"games\").on('value', (snapshot) => {\n    //         let json = snapshot.val();\n    //         this.setState({ game: json[this.state.gameId] }, this.setStory);\n    //     });\n    // }\n\n    toggleTheme = () => this.setState(prevState => ({ inverted: !prevState.inverted }));\n    // called from welcome\n    setGameValues = (gameId, name) => this.setState({ gameIdUncleaned: gameId, name: name }, this.getGameData);\n    // called when creating a new game from story\n    setGameId = (gameId) => this.setState({ gameId: gameId });\n    // get game data, or create a new game if no game with the gameId exists\n    getGameData = () => {\n        firebaseRef.child(\"games\").once('value', (snapshot) => {\n            let json = snapshot.val();\n            console.log(json);\n            // console.log(json[this.state.gameIdUncleaned]);\n            // if no existing game exists with that name, create a new one\n            if (json === null || this.state.gameIdUncleaned === null || json[this.state.gameIdUncleaned] == null) {\n                this.createNewGame();\n            } else {\n                this.setState({ gameId: this.state.gameIdUncleaned }, () => {\n                    createUser(this.state.gameId, this.state.name);\n                });\n            }\n        });\n    }\n\n    createNewGame = () => {\n        createGame(this.state.name)\n            .then((gameId) => {\n                console.log('got game id: ' + gameId);\n                // update state and parent state with new randomly generated game id\n                this.setState({ gameId: gameId });\n            })\n            .catch(err => console.log('error: ' + err));\n    }\n\n    render() {\n        console.log(this.state);\n        return (\n            <Container>\n                <Grid verticalAlign='middle' columns={1} style={{minHeight:\"70vh\"}}>\n                    <Grid.Column>\n                        {this.state.gameId === null ? (\n                            <Welcome inverted={this.state.inverted} setGameValues={this.setGameValues} />\n                        )\n                            :\n                            (\n                                <Story inverted={this.state.inverted} gameId={this.state.gameId} name={this.state.name} setGameId={this.setGameId} />\n                            )}\n                        <Radio toggle onChange={this.toggleTheme} label=\"Dark Mode\" />\n                    </Grid.Column>\n                </Grid>\n\n            </Container>\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport { Header, Icon, Menu, Modal } from 'semantic-ui-react';\n\nexport default class MenuBar extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            inverted: false,\n            visible: false,\n            modal: false\n        };\n    }\n\n    componentDidMount() {\n    }\n\n    refreshPage = () => window.location.reload();\n    openModal = () => this.setState({ modal: true });\n    closeModal = () => this.setState({ modal: false });\n\n    render() {\n        const { visible } = this.state;\n\n        return (\n            <div>\n                <Menu inverted={this.state.inverted} size='massive'>\n                    <Menu.Item name='Story Mania' onClick={this.refreshPage}/>\n                    <Menu.Menu position='right'>\n                        <Menu.Item name='About' onClick={this.openModal} ><Icon name='info circle' /></Menu.Item>\n                    </Menu.Menu>\n                </Menu>\n                <Modal open={this.state.modal} onClose={this.closeModal} >\n                    <Modal.Header>About this game</Modal.Header>\n                    <Modal.Content>\n                        <Modal.Description>\n                            <Header>Story Mania</Header>\n                            <p>An interactive multiplayer game where each person types in an extra word to form a story</p>\n                            <p>More features/information coming soon!</p>\n                        </Modal.Description>\n                    </Modal.Content>\n                </Modal>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport 'semantic-ui-css/semantic.min.css'\nimport Home from './components/home';\nimport MenuBar from './components/menu';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MenuBar />\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}